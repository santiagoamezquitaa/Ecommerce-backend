openapi: "3.0.1"
info: API Products
version: "1.0"
paths:
  /api/products:
    get:
      summary: Obtiene todos los productos
      description: Obtiene todos los productos, tiene aplicado pagination de mongoose, por lo tanto recibe por query params un limite de productos, la pagina y ordenamiento por precio de forma ascendente o descendente.
      tags:
        - Products
      responses:
        "200":
          description: Todos los productos fueron obtenidos de forma exitosa
          content:
            application/json:
              schema:
                type: array
                items:
                  $ref: "#components/schemas/Product"
        "500":
          description: Error interno del servidor, usualmente generado por una query defectuosa
    post:
      summary: Crea un nuevo producto
      description: Crea un nuevo producto apartir de un request body. Requiere estar autenticado con perfil de admin o de user_premium.
      tags:
        - Products
      responses:
        "200":
          description: El producto fue creado de forma exitosa
          content:
            application/json:
              schema:
                type: array
                items:
                  $ref: "#components/requestBodies/postProduct"
        "400":
          description: Error de cliente, usualmente generado por un id de producto no existente.
        "401":
          description: Error de cliente, generado porque no está autenticado.
        "402":
          description: Error de cliente, generado porque faltan campos obligatorios.

  /api/products/{pid}:
    get:
      summary: Obtiene un producto con base en su id
      description: Obtiene un solo producto con base a su id, el cual es obtenido a partir de un request params.
      tags:
        - Products
      parameters:
        - name: pid
          in: path
          required: true
          description: id del producto solicitado.
          schema:
            $type: String
      responses:
        "200":
          description: El producto fue obtenido de forma exitosa
          content:
            application/json:
              schema:
                type: array
                items:
                  $ref: "#components/schemas/Product"
        "400":
          description: Error de cliente, usualmente generado por un id de producto no existente.
    delete:
      summary: Borra un producto con base en su id
      description: Borra un producto apartir de su id. Requiere estar autenticado con perfil de admin o de user_premium.
      tags:
        - Products
      parameters:
        - name: pid
          in: path
          required: true
          description: id del producto a eliminar.
          schema:
            $type: String
      responses:
        "200":
          description: El producto fue borrado de forma exitosa
          content:
            application/json:
              schema:
                type: array
                items:
                  $ref: "#components/schemas/Product"
        "400":
          description: Error de cliente, usualmente generado por un id de producto no existente.
        "401":
          description: Error de cliente, generado porque no está autenticado.
        "402":
          description: Error de cliente, generado porque no tiene permisos sobre este producto (No es el owner).
    put:
      summary: Actualiza un producto con base en su id
      description: Actualiza un producto apartir de su id. Requiere estar autenticado con perfil de admin o de user_premium.
      tags:
        - Products
      parameters:
        - name: pid
          in: path
          required: true
          description: id del producto a actualizar.
          schema:
            $type: String
      responses:
        "200":
          description: El producto fue actualizado de forma exitosa
          content:
            application/json:
              schema:
                type: array
                items:
                  $ref: "#components/requestBodies/putProduct"
        "400":
          description: Error de cliente, usualmente generado por un id de producto no existente.
        "401":
          description: Error de cliente, generado porque no está autenticado.
        "402":
          description: Error de cliente, generado porque no tiene permisos sobre este producto (No es el owner).

components:
  schemas:
    Product:
      type: object
      properties:
        _id:
          type: ObjectId
          description: Id generado autómaticamente por Mongo
        title:
          type: String
          description: Nombre del producto
        description:
          type: String
          description: Descripción del producto
        price:
          type: Number
          description: Precio del producto
        category:
          type: String
          description: Categoría del producto
        code:
          type: Number
          description: Código del producto, este campo es único
        stock:
          type: Number
          description: Número de unidades del producto
        status:
          type: String
          description: Disponibilidad del producto
        owner:
          type: String
          description: Dueño del producto (email), por defecto se pondrá "admin"
        thumbnails:
          type: Array
          description: Imagenes del producto, esta propiedad es opcional
      example:
        _id: ObjectId("64c03515f17ec5862ad9b327")
        title: Camiseta
        description: Azul, manga corta, tela delgada
        price: 100
        category: Ropa para hombre
        code: 95331690318101180
        stock: 12
        status: "true"
        owner: ricardo@gmail.com
        thumbnails: ["foto.png"]
  requestBodies:
    postProduct:
      description: Body con la data del producto que se creará
      properties:
        title:
          type: String
          description: Nombre del producto
        description:
          type: String
          description: Descripción del producto
        price:
          type: Number
          description: Precio del producto
        category:
          type: String
          description: Categoría del producto
        code:
          type: Number
          description: Código del producto, este campo es único
        stock:
          type: Number
          description: Número de unidades del producto
        status:
          type: String
          description: Disponibilidad del producto
        owner:
          type: String
          description: Dueño del producto (email), por defecto se pondrá "admin"
        thumbnails:
          type: Array
          description: Imagenes del producto, esta propiedad es opcional
      example:
        title: Zapatos
        description: Deportivos amarillos
        price: 200
        category: Ropa para hombre
        code: 24182639182649
        stock: 8
        status: "true"
        owner: admin
        thumbnails: ["foto.png"]
    putProduct:
      description: Body con la data del producto que se actualizará
      properties:
        title:
          type: String
          description: Nombre del producto
        price:
          type: Number
          description: Precio del producto
        category:
          type: String
          description: Categoría del producto
        stock:
          type: Number
          description: Número de unidades del producto
      example:
        title: Vestido
        price: 40
        category: Ropa para mujer
        stock: 10
